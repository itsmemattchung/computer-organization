# == quicksort ==
# We need to store two variables that get preserved across calls: low and high
# In addition,we need need to store the value 'partition'
# s0 = array (address)
# s1 = low
# s2 = high
#
# == parition ==
# since we need to preserve the value of the variables within the function
# as we call the 'swap()' function, we'll need to store practically all the variables
# in registers $s0-$s7, registers preserved across method calls
# $s0 = left
# $s1 = right
# $s2 = array
# $s3 = pivot
# $s4 = array[right] (value)
#
# However, there are variables that need not be preserved, such as:
# $t0 = array[low] (address)
# $t1 = array[left] (address)
# $t2 = array[left] (value)
# $t2 = array[right] (value)
# $t3 = array[right] (address) -- since I'm unsure whether $a1 gets preserved across the call
# $t4 = address offset for array[right]


	    .data
numbers:	.word 8, 2, 7, 10, 5, 6, 3, 4, 9, 3, 1
length:		.word 11
	    .text
	    .globl main
main:
	la $a0, numbers		# Load the address numbers into $a0, the first argument
	li $a1, 0		# Load 0 into $a, the second argument
	lw $t0, length		# Load the length of the array into temporary register $t0
	sub $a2, $t0, 1		# Subtract 1 from the length of the array and store into $a3, the first argument
	j quicksort
	li $v0, 10
	syscall

quicksort:
	bge $a1, $a2, quicksort_end_if
	sub $sp, $sp, -20	# Subtract the stack by 12 bytes, capable of 3 registers (plus the 1 return address)
	sw $ra, 4($sp)		# Store return address on the stack
	sw $s0, 8($sp)		# Store $s1 on the stack
	sw $s1, 12($sp)		# Store $s2 on the stack
	sw $s2, 16($sp)		# Store $s3 on the stack
	move $s0, $a0		# Store $a0 (address of array) into $s0
	move $s1, $a1		# Store $a1 (low) into $s1
	move $s2, $a2		# Store $a2 (low) into $s2
	jal partition

quicksort_if:

quicksort_end_if:

partition:
partition_init:
	sub $sp, $sp, -24	# save room for the return address
	sw $ra, 4($sp)
	sw $s0, 8($sp)
	sw $s1, 12($sp)
	sw $s2, 16($sp)
	sw $s3, 20($sp)
	sw $s4, 24($sp)
	move $s0, $a1					# Store value of low to left, $s0
	move $s1, $a2					# Store value of high to right, $s1
	move $s2, $a0					# Store address of array in $s2
	lw $s3, 0($s2)					# Store the value of array[low] into pivot

while_left_lt_right:
	bge $s0, $s1, end_while_left_lt_right

while_array_right_gt_pivot:
	mul $s4, $s1, 4					# Calculate offset of array[right]
	add $s4, $s2, $s4				# Calculate memory address of array[right]
	lw $s4, 0($s4)					# Load array[right] into $s4
	ble $s4, $s3, end_while_array_right_gt_pivot	
	sub $s1, $s1, 1
	j while_array_right_gt_pivot
	
end_while_array_right_gt_pivot:

while_left_lt_right_and_array_left_lte_pivot:
	bge $s0, $s1, end_while_left_lt_right_and_array_left_lte_pivot	# Jump to end of loop if !(left < right)
	mul $t1, $s0, 4							# Calculate offset for array[left]
	add $t1, $s2, $t1						# Calculate memory address of array[left]
	lw  $t2, 0($t1)							# Load array[left] into $t2

end_while_left_lt_right_and_array_left_lte_pivot:

end_while_left_lt_right:
	

