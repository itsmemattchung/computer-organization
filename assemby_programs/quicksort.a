# == quicksort ==
# We need to store two variables that get preserved across calls: low and high
# In addition,we need need to store the value 'partition'
# s0 = array (address)
# s1 = low
# s2 = high
#
# == parition ==
# since we need to preserve the value of the variables within the function
# as we call the 'swap()' function, we'll need to store practically all the variables
# in registers $s0-$s7, registers preserved across method calls
# $s0 = left
# $s1 = right
# $s2 = array
# $s3 = pivot
# $s4 = array[right] (value)
#
# However, there are variables that need not be preserved, such as:
# $t0 = array[low] (address)
# $t1 = array[left] (address)
# $t2 = array[left] (value)
# $t2 = array[right] (value)
# $t3 = array[right] (address) -- since I'm unsure whether $a1 gets preserved across the call
# $t4 = address offset for array[right]
# $t5 = temporary variable for swap, although I'd like to eliminate this eventually and reuse $t1, but only after verifying the program works and after verifying
# that I'm not overwriting a referenced variable
# $t6 = temporary variable for swap function
# $t7 = temporary for final swap
# $t8 = temporary for final swap



	    .data
numbers:	.word 8, 2, 7, 10, 5, 6, 3, 4, 9, 3, 1
length:		.word 11
	    .text
	    .globl main
main:
	la $a0, numbers		# Load the address numbers into $a0, the first argument
	li $a1, 0		# Load 0 into $a, the second argument
	lw $t0, length		# Load the length of the array into temporary register $t0
	sub $a2, $t0, 1		# Subtract 1 from the length of the array and store into $a3, the first argument
	j quicksort
	li $v0, 10
	syscall

quicksort:
	bge $a1, $a2, quicksort_end_if
	sub $sp, $sp, -20	# Subtract the stack by 12 bytes, capable of 3 registers (plus the 1 return address)
	sw $ra, 4($sp)		# Store return address on the stack
	sw $s0, 8($sp)		# Store $s1 on the stack
	sw $s1, 12($sp)		# Store $s2 on the stack
	sw $s2, 16($sp)		# Store $s3 on the stack
	move $s0, $a0		# Store $a0 (address of array) into $s0
	move $s1, $a1		# Store $a1 (low) into $s1
	move $s2, $a2		# Store $a2 (high) into $s2
	jal partition
	move $t1, $v0		# Store pivot -1 into $a2
	move $a0, $s0		# Store $s0, array, into $a0
	move $a1, $s1		# Store $s1, low, into $a1
	move $a2, $v0		# Store pivot position in $a2
	sub $a2, $a2, 1		# Subtract 1 from $a2 (i.e. pivot - 1)
	jal quicksort		# First call to quicksort (i.e. quickSort(array, low, pivotPosition - 1)
	move $a0, $s0		# Store array into $a0
	move $a1, $v0		# Move pivot into $a1
	add $a1, $a1, 1		# Add 1 to $a1 (i.e. pivot + 1)
	move $a3, $s2		# Move high (i.e. $s2) into $a2
	jal quicksort		# Second call to quicksort (i.e. quickSort(array, pivotPosition + 1, high)
	li $v0, 10		# system code for exit
	syscall

quicksort_if:

quicksort_end_if:

partition:
partition_init:
	sub $sp, $sp, -24				# save room for the return address
	sw $ra, 4($sp)
	sw $s0, 8($sp)
	sw $s1, 12($sp)
	sw $s2, 16($sp)
	sw $s3, 20($sp)
	sw $s4, 24($sp)
	sw $s5, 28($sp)
	move $s5, $a1					# Store value of low into $s5, which can be referenced later on
	move $s0, $a1					# Store value of low to left, $s0
	move $s1, $a2					# Store value of high to right, $s1
	move $s2, $a0					# Store address of array in $s2
	mul $s3, $s0, 4					# Caculate offset of array[low] into $s3
	add $s3, $s2, $s3				# Add offset to array
	lw $s3, 0($s3)					# Store the value of array[low] into pivot

while_left_lt_right:
	bge $s0, $s1, end_while_left_lt_right

while_array_right_gt_pivot:
	mul $t3, $s1, 4					# Calculate offset of array[right]
	add $t3, $s2, $t3				# Calculate memory address of array[right]
	lw $s4, 0($t3)					# Load array[right] into $s4
	ble $s4, $s3, end_while_array_right_gt_pivot	
	sub $s1, $s1, 1
	j while_array_right_gt_pivot
	
end_while_array_right_gt_pivot:

while_left_lt_right_and_array_left_lte_pivot:
	bge $s0, $s1, end_while_left_lt_right_and_array_left_lte_pivot	# Jump to end of loop if !(left < right)
	mul $t1, $s0, 4							# Calculate offset for array[left]
	add $t1, $s2, $t1						# Calculate memory address of array[left]
	lw  $t2, 0($t1)							# Load array[left] into $t2
	bgt $t2, $s3, end_while_left_lt_right_and_array_left_lte_pivot	# Break out of loop if !array[left] <= pivot
	addi $s0, $s0, 1						# +1 to left
	j while_left_lt_right_and_array_left_lte_pivot			# return to loop

end_while_left_lt_right_and_array_left_lte_pivot:

if_left_lt_right:
	bge $s0, $s1, end_if_left_lt_right				# jump to end_if if !(left < right)
	move $a0, $t1							# store address of array[left] to $a0
	move $a1, $t3							# store address of array[right] to $a1
	jal swap

end_if_left_lt_right:

end_while_left_lt_right:

move_pivot_to_final_position:
	mul $t7, $s1, 4							# Calculate the offset for array[right] and store into $t7
	add $t7, $s2, $t7						# Calculate memory address of array[right] and store into $t7
	lw $t8, 0($t7)							# Load the value of array[right] into $t8
	mul $t9, $s5, 4							# Calculate offset of array[low] into $t8
	add $t9, $s2, $t9						# Store address of array[low] into $t8
	sw $t8, 0($t9)							# Save value of array[right] into array[low] (i.e. array[low] = array[right])
	sw $s3, 0($t7)							# Store pivot at array[right]
	lw $ra, 4($sp)							# Load $ra previously saved on stack into $ra
	addi $sp, $sp, 24						# Pop call frame
	move $v0, $s1							# Move right into $v0, the return value
	jr $ra								# Return $ra


end_partition:

	

swap:
	move $t5, $a0							# Store memory address of A into $t5
	lw $t5, 0($t5)							# Load value into $t5
	move $t6, $a1							# Store memory address of B into $t6
	lw $t6, 0($t6)							# Load value into $t6
	sw $t5, 0($a1)							# Store A into memory address of B
	sw $t6, 0($a0)							# Store B into memory address of A
	jr $ra								# Jump to the instruction stored in $ra
